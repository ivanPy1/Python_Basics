# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного
# задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента
# необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться. 


class StringWithNumber(Exception):

    def __init__(self):
        self.text_of_error = 'Вы ввели не число!!! Введите число '
        self.user_list = []

    def append(self, value):

        if value.isnumeric():
            self.user_list.append(int(value))
        else:
            raise StringWithNumber

    def __str__(self):
        return ', '.join([str(el) for el in self.user_list])


list = StringWithNumber()

while True:
    try:
        value = input('Введите число: ')
        if value == 'stop':
            break

        list.append(value)
    except StringWithNumber as e:
        print(e.text_of_error)

print(f'Введеные числа : {list}')
