# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение.
# Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух
# клеток. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
# и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида
# *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки
# равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****. Подсказка:
# подробный список операторов для перегрузки доступен по ссылке.


class Cell:

    def __init__(self, cells_number):
        self.cells_number = int(cells_number)

    def __add__(self, other):
        return Cell(self.cells_number + other.cells_number)

    def __sub__(self, other):
        odds = self.cells_number - other.cells_number
        if odds > 0:
            return Cell(odds)
        else:
            print('разность < 0')

    def __mul__(self, other):
        return Cell(self.cells_number * other.cells_number)

    def __truediv__(self, other):
        if other.cells_number > 0:
            return Cell(int(round(self.cells_number / other.cells_number, 0)))
        else:
            print('Деление на 0')

    def __floordiv__(self, other):
        if other.cells_number > 0:
            return Cell(self.cells_number // other.cells_number)
        else:
            print('Деление на 0')

    def make_order(self, number_in_row):
        result = ''
        for i in range(0, self.cells_number // number_in_row):
            result += '*' * number_in_row + '\n'
        result += '*' * (self.cells_number % number_in_row) + '\n'
        return result.strip()


Cell_1 = Cell(123)
Cell_2 = Cell(10)

print(f'{(Cell_1 + Cell_2).cells_number}')
print(f'{(Cell_1 * Cell_2).cells_number}')
print(f'{(Cell_1 / Cell_2).cells_number}')
print(f'{(Cell_1 / Cell_2).cells_number}')
print(f'\n' + Cell_1.make_order(10))
print(f'\n' + Cell_2.make_order(5))
